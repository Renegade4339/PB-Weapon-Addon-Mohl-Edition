// ------------------------------------------------------------
// Combat Knife
// ------------------------------------------------------------
class HDStabber:IdleDummy{
	default{
		+bloodlessimpact +nodecal +hittracer +puffonactors
		stamina 1;
	}
}

const HDLD_KNIFE="knf";

class HDCombatKnife:HD_PB_UnarmedWeapon{
	int targettimer;
	int targethealth;
	int targetspawnhealth;
	bool flicked;
	bool washolding;
	
	default{
		+WEAPON.MELEEWEAPON +WEAPON.NOALERT +WEAPON.NO_AUTO_SWITCH
		+hdweapon.fitsinbackpack
		//-hdweapon.dontnull
		-weapon.cheatnotweapon
		-nointeraction
		-inventory.untossable
		+forcepain
		+forceXYbillboard
		+rollsprite
		+rollcenter
		+hdweapon.reverseguninertia
		radius 3;height 3;
		inventory.pickupmessage "You got the combat knife!";
		hdweapon.barrelsize 1,1,1;
		obituary "%o got shanked by %k.";
		attacksound "*fist";
		weapon.selectionorder 100;
		weapon.kickback 120;
		weapon.bobstyle "Alpha";
		weapon.bobspeed 2.6;
		weapon.bobrangex 0.1;
		weapon.bobrangey 0.5;
		weapon.slotnumber 1;
		weapon.slotpriority 2.1;
		scale 0.6;
		//+FLATSPRITE
		DamageFunction (random(100,110));
		tag "Combat Knife";
		hdweapon.refid HDLD_KNIFE;
	}
	override bool AddSpareWeapon(actor newowner){return AddSpareWeaponRegular(newowner);}
	override hdweapon GetSpareWeapon(actor newowner,bool reverse,bool doselect){return GetSpareWeaponRegular(newowner,reverse);}
	
	override void DrawHUDStuff(HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl){
		let ww=HDCombatKnife(hdw);
		if(ww.targethealth)sb.drawwepnum(ww.targethealth,ww.targetspawnhealth);
	}
	override string gethelptext(){
		return
		WEPHELP_FIRE.."  Stab\n"
		..WEPHELP_ZOOM.."+"..WEPHELP_FIRE.."   Rapid Stab\n"
		..WEPHELP_ALTFIRE.."   Lunge\n"
		..WEPHELP_RELOAD.."   Distracting strike\n"
		..WEPHELP_FIREMODE.."   Grab/Drag\n"
		..WEPHELP_ZOOM.."+"..WEPHELP_DROP.."   Throw knife\n" 
		;
	}
	
	override string,double getpickupsprite(){return "KNFPZ0",0.35;}
	
	override double weaponbulk(){
		return 15;
	}
	override double gunmass(){
		return 6;
	}
	
	action void A_Lunge(){
		hdplayerpawn hdp=hdplayerpawn(self);
		if(hdp){
			if(hdp.fatigue>=30){setweaponstate("hold");return;}
			else hdp.fatigue+=3;
		}
		A_Recoil(min(hdp.overloaded*0.6,4.)-4.);
	}
	static void kick(actor kicker,actor kickee,actor kicking){
		kickee.A_PlaySound("weapons/smack",CHAN_BODY);
		bool kzk=kicker.countinv("HDZerk");
		kickee.damagemobj(kicking,kicker,kzk?random(20,40):random(10,20),"bashing");
		if(kickee&&!kickee.bnopain&&kickee.health>0&&random(0,4))kickee.setstatelabel("pain");
		vector3 kickdir=(kickee.pos-kicker.pos).unit();
		if(kickee)kickee.vel=kickdir*(kzk?10:2);
		kicker.vel-=kickdir;
	}

		//for throwing a weapon
	override inventory CreateTossable(int amount){
	
		let onr=hdplayerpawn(owner);
		bool throw=(
			onr&&(
				onr.zerk
				||(
					onr.player
					&&onr.player.cmd.buttons&BT_ZOOM
				)
			)
		);
		bool isreadyweapon=onr&&onr.player&&onr.player.readyweapon==self;
		if(!isreadyweapon)throw=false;
		let thrown=super.createtossable(amount);
		if(!thrown)return null;
		let newwep=GetSpareWeapon(onr,doselect:isreadyweapon);
		hdweapon(thrown).bjustchucked=true;
		thrown.target=onr;
		if(throw){
			thrown.bmissile=true;
			//a_setangle(-90+angle);
			thrown.bFLATSPRITE=true;
			thrown.bNOEXTREMEDEATH=true;
			thrown.bBOUNCEAUTOOFF=true;
		}else{
			thrown.bmissile=false;
			thrown.bFLATSPRITE=false;
			thrown.bNOEXTREMEDEATH=false;
			thrown.bBOUNCEAUTOOFF=false;
			}
		return thrown;
	}
	//an override is needed because DropInventory will undo anything done in CreateTossable
	double throwvel;
	override void Tick(){
		super.Tick();
		if(bjustchucked)
		{
		pitch+=15;
		}
		if(bjustchucked&&target){
			double cp=cos(target.pitch);
			if(bmissile){
				vel=target.vel+
					(cp*cos(target.angle),cp*sin(target.angle),-sin(target.pitch))
					*min(20,100/weaponbulk())
					*((hdplayerpawn(target)&&hdplayerpawn(target).zerk>0)?frandom(1,4):1
				);
			}else vel=target.vel+2*(cp*cos(target.angle),cp*sin(target.angle),-sin(target.pitch))*2;
			setz(target.pos.z+target.height-16);
			throwvel=vel dot vel;
			bjustchucked=false;
		}
		if(owner){
			if(amount<1){
				destroy();
				return;
			}else{
				//update count
				actualamount=1;
				if(owner&&owner.findinventory("SpareWeapons")){
					let spw=spareweapons(owner.findinventory("SpareWeapons"));
					string gcn=getclassname();
					for(int i=0;i<spw.weapontype.size();i++){
						if(spw.weapontype[i]==gcn)actualamount++;
					}
				}
			}
			let onr=hdplayerpawn(owner);
			if(
				!bwimpy_weapon
				&&!hdcombatknife(self)
				&&onr
				&&onr.player
				&&onr.player.readyweapon==self
				&&!onr.barehanded
				&&onr.zerk
				&&(
					onr.player.cmd.buttons&BT_ATTACK
					||onr.player.cmd.buttons&BT_ALTATTACK
					||onr.player.cmd.buttons&BT_ZOOM
					||bweaponbusy
					||onr.vel.xy==(0,0)
				)
				&&!random(0,511)
			){
				onr.A_StartSound(random(0,5)?"*xdeath":"*taunt",CHAN_VOICE);
				onr.A_AlertMonsters();
				onr.dropinventory(self);
			}
		}
	}

	override void DoEffect(){
		super.DoEffect();
		if(targettimer<70)targettimer++;else{
			tracer=null;
			targettimer=0;
			targethealth=0;
		}
	}
	action void HDStab(double dmg){
		flinetracedata punchline;
		bool punchy=linetrace(
			angle,54,pitch,
			TRF_NOSKY,
			offsetz:height-12,
			data:punchline
		);
		if(!punchy)return;

		//actual puff effect if the shot connects
		LineAttack(angle,54,pitch,punchline.hitline?(countinv("HDZerk")?random(50,120):random(5,15)):0,"none",
			countinv("HDZerk")?"BulletPuffMedium":"BulletPuffSmall",
			flags:LAF_NORANDOMPUFFZ|LAF_OVERRIDEZ,
			offsetz:height-12
		);

		if(!punchline.hitactor){
			HDF.Give(self,"WallChunkAmmo",1);
			return;
		}
		actor punchee=punchline.hitactor;

		//charge!
		if(invoker.flicked)dmg*=1.5;
		else dmg+=HDMath.TowardsEachOther(self,punchee)*2;

		//come in swinging
		let onr=hdplayerpawn(self);
		if(onr){
			int iy=max(abs(player.cmd.pitch),abs(player.cmd.yaw));
			if(iy>0)iy*=100;
			else if(iy<0)iy*=200;
			dmg+=min(abs(iy),dmg*2);

			//need to be well grounded
			if(floorz<pos.z)dmg*=0.5;
		}

		//shit happens
		HDBleedingWound.inflict(punchee,int(dmg*frandom(0.6,1.6)));

		//other effects
		if(
			onr
			&&!punchee.bdontthrust
			&&(
				punchee.mass<200
				||(
					punchee.radius*2<punchee.height
					&& punchline.hitlocation.z>punchee.pos.z+punchee.height*0.6
				)
			)
		){
			double iyaw=player.cmd.yaw*(65535./360.);
			if(abs(iyaw)>(0.5)){
				punchee.A_SetAngle(punchee.angle-iyaw*100,SPF_INTERPOLATE);
			}
			double ipitch=player.cmd.pitch*(65535./360.);
			if(abs(ipitch)>(0.5*65535/360)){
				punchee.A_SetPitch(punchee.angle+ipitch*100,SPF_INTERPOLATE);
			}
		}
		//headshot lol
		if(
			!punchee.bnopain
			&& punchee.health>0
			&& !(punchee is "HDBarrel")
			&& punchee.findstate("pain")
			&& punchline.hitlocation.z>punchee.pos.z+punchee.height*0.75
		){
			if(hd_debug)A_Log("HEAD SHOT");
			punchee.setstatelabel("pain");
			dmg*=frandom(1.1,1.8);
		}

		if(hd_debug){
			string pch="";
			if(punchee.player)pch=punchee.player.getusername();
				else pch=punchee.getclassname();
			A_Log(string.format("Punched %s for %i damage!",pch,dmg));
		}
		if(dmg*2>punchee.health)punchee.A_StartSound("misc/bulletflesh",CHAN_BODY);  
		if(punchee.health>0)punchee.damagemobj(self,self,int(dmg),"SmallArms0");
		//else HDF.Give(punchee,"SawGib",dmg*0.2);

		if(!punchee)invoker.targethealth=0;else{
			invoker.targethealth=punchee.health;
			invoker.targetspawnhealth=punchee.spawnhealth();
			invoker.targettimer=0;
		}
	}
	
	
	actor grabbed;
	double grabangle;
	action void A_CheckGrabbing(){
		let grabbed=invoker.grabbed;
		let grabangle=invoker.grabangle;

		//if no grab target, find one
		if(!grabbed){
			flinetracedata glt;
			linetrace(
				angle,
				36,
				pitch,
				TRF_ALLACTORS,
				height-18,
				data:glt
			);
			if(!glt.hitactor){
				A_ClearGrabbing();
				return;
			}
			let grbd=glt.hitactor;
			grabbed=grbd;
			grabangle=grbd.angle;
			invoker.grabangle=grabangle;
			invoker.grabbed=grbd;
		}
		bool resisting=(
			(
				grabbed.bismonster
				&&!grabbed.bnofear&&!grabbed.bghost //*ERPs use both of these flags
				&&grabbed.health>0
			)||(
				grabbed.player
				&&(
					!hdplayerpawn(grabbed)
					||!hdplayerpawn(grabbed).incapacitated
				)&&(
					grabbed.player.cmd.forwardmove
					||grabbed.player.cmd.sidemove
					||grabbed.player.cmd.pitch
					||grabbed.player.cmd.yaw
				)
			)
		);
		bool zerk=(
			hdplayerpawn(self)
			&&hdplayerpawn(self).zerk>100
		);
		//chance to break away
		if(resisting){
			vel+=(frandom(-1,1),frandom(-1,1),frandom(-1,1));
			let grabbedmass=grabbed.mass;
			if(frandom(grabbedmass*0.1,grabbedmass)>frandom(mass*0.6,mass*(zerk?5:1))){
				vector2 thrustforce=(cos(angle),sin(angle))*frandom(0.,2.);
				grabbed.vel.xy+=thrustforce*min(mass/grabbed.mass,1.);
				vel.xy-=thrustforce;
				A_ClearGrabbing();
				return;
			}
			if(absangle(angle,grabangle)>10)invoker.grabangle-=frandom(10,20);
			if(!random(0,7)){
				grabbed.damagemobj(self,self,1,"Melee");
				double newgrangle=(grabbed.angle+angle)*0.5;
				grabbed.angle=newgrangle;
				invoker.grabangle=newgrangle;
			}
		}
		double massfactor=max(1.,grabbed.mass*(1./200.));
		if(massfactor>7.){
			A_ClearGrabbing();
			return;
		}

		double grangle=grabbed.angle*2;
		grabbed.A_SetAngle((grabangle+grangle)*0.333333333333333,SPF_INTERPOLATE);

		//drag
		double mindist=grabbed.radius+radius;

		double dragfactor=min(0.8,0.8*mass/grabbed.mass);
		usercmd cmd=player.cmd;
		int fm=cmd.forwardmove>0?1:cmd.forwardmove<0?-1:0;
		int sm=cmd.sidemove>0?1:cmd.sidemove<0?-1:0;
		if(!sm&&fm<0)dragfactor*=1.7;

		vector2 dragmove=rotatevector((dragfactor*fm,-dragfactor*sm),angle)*player.crouchfactor;
		if(trymove(pos.xy+dragmove,true)){
			let p=HDPlayerPawn(self);
			if(p)p.movehijacked=true;
		}

		let gdst=grabbed.maxstepheight;
		let gddo=grabbed.bnodropoff;
		grabbed.maxstepheight=maxstepheight;
		grabbed.bnodropoff=false;
		grabbed.trymove(grabbed.pos.xy+dragmove,true);
		grabbed.maxstepheight=gdst;
		grabbed.bnodropoff=gddo;
		grabbed.setz(max(grabbed.pos.z,grabbed.floorz));

		string grbng="dragging ";
		if(grabbed.bcorpse)grbng=grbng.."corpse";
		else if(inventory(grabbed)||hdupk(grabbed))grbng=grbng.."item";
		else grbng=grbng.."object";
		if(hd_debug)grbng=grbng.."\n"..grabbed.getclassname();
		A_WeaponMessage(grbng.."...",3);

		if(
			absangle(angle,angleto(grabbed))>60.
			||distance3d(grabbed)>(mindist+16)
		){
			A_ClearGrabbing();
			return;
		}
		invoker.grabangle=angle;
	}
	action void A_ClearGrabbing(){
		let p=HDPlayerPawn(self);if(p)p.movehijacked=false;
		invoker.grabbed=null;
		A_WeaponMessage("");
	}
	
	states{
	
	select:
		TNT1 A 0{
			//these two don't actually work???
			A_OverlayFlags(PSP_WEAPON,PSPF_CVARFAST|PSPF_POWDOUBLE,false);
			A_OverlayFlags(PSP_FLASH,PSPF_CVARFAST|PSPF_POWDOUBLE,false);

			A_WeaponBusy();
			A_SetCrosshair(21);
			A_SetHelpText();
			
			invoker.weaponstatus[FRAGS_FORCE]=0;

			return resolvestate("select0");
		}
		select0:
		CKF0 E 0;
		goto select0small;
	deselect:
		TNT1 A 0 A_StartDeselect();
	deselect0:
		CKF0 E 0;
		goto deselect0small;
		
	ready:
		CKF0 E 1{
			if(invoker.washolding&&pressingfire()){
				setweaponstate("nope");
				return;
			}
			A_WeaponReady(WRF_ALL);
			invoker.flicked=false;
			invoker.washolding=false;
		}goto readyend;
	reload:
	flick:
		CKF0 A 1 offset(0,50) A_Lunge();
		#### A 1 offset(0,36);
		#### A 0 A_JumpIfInventory("HDZerk",1,"ZerkFlick");
		#### AAAAAAA 0 A_CustomPunch((1),1,CPF_PULLIN,"HDFistPuncher",36);
		goto flickend;
	zerkflick:
		#### AAAAAAA 0 A_CustomPunch((random(1,3)),1,CPF_PULLIN,"HDFistPuncher",36);
	flickend:
		#### AA 1 offset(0,38){invoker.flicked=true;}
		#### A 1 offset(0,42);
		#### A 1 offset(0,50);
		goto fire;
	fire:
	hold:
	althold:
	startfire:
		CKF0 A 0 A_JumpIfInventory("HDZerk",1,"zerkpunch");
		#### E 0 A_JumpIf(pressingzoom(),"impostorstab");
		goto punch;
	punch:
		CKF0 C 1 A_WeaponReady(WRF_NOSWITCH|WRF_NOFIRE);
		#### D 0 HDStab(15);
		#### D 6;
		#### CB 3;
		#### E 3;
		#### E 0 A_JumpIf(pressingaltfire(),"altfire");
		#### E 1 A_ReFire();
		goto ready;
		//sus
	impostorstab:
		CKF0 D 0 A_WeaponReady(WRF_NOSWITCH|WRF_NOFIRE);
		#### A 0{
		let hdp=hdplayerpawn(self);
		if(hdp){
			if(hdp.fatigue>=30)setweaponstate("nope");
			else hdp.fatigue+=2;
			}
		HDStab(8);
		}
		#### D 3;
		#### CBE 1;
		#### E 1;
		#### E 0 A_JumpIf(pressingaltfire(),"altfire");
		#### E 2 A_ReFire();
		goto ready;
	zerkpunch:
		CKF0 D 0 {A_Recoil(-1); A_WeaponReady(WRF_NOSWITCH|WRF_NOFIRE);}
		#### D 0 HDStab(invoker.flicked?150:110);
		#### D 3;
		#### CBE 1;
		#### E 1;
		#### E 0 A_JumpIf(pressingaltfire(),"altfire");
		#### E 2 A_ReFire();
		goto ready;
	altfire:
		CKF0 E 1 offset(0,36);
		#### E 1 offset(0,50);
		#### E 2 A_CheckFloor("lunge");
		goto kick;
	lunge:
		TNT1 A 0 A_Lunge();
		TNT1 AA 1{
			if(countinv("HDZerk"))A_Recoil(-random(12,24));
		}
		TNT1 A 1 A_Recoil(-4);
	kick:
		TNT1 A 13{
			if(hdplayerpawn(self))hdplayerpawn(self).fatigue+=2;
			flinetracedata ktl;
			LineTrace(angle,radius*1.6,0,offsetz:10,data:ktl);
			if(ktl.hitactor)invoker.kick(self,ktl.hitactor,invoker);
			if(countinv("HDZerk"))A_SetTics(8);
		}
		CKF0 A 0 A_Refire();
		goto ready;
	grabhold:
		CKF0 A 1 {invoker.weaponstatus[FRAGS_FORCE]=50;}
		TNT1 A 0 A_JumpIf(pressingfire(),"YEET");
		TNT1 A 0 A_JumpIf(pressingfiremode(),"grabhold");
		goto nope;
	firemode:
	grab:
	grab2:
		CKF0 A 1 offset(0,52);
		#### A 1 offset(0,32);
		goto grabhold;
	YEET:
		---- A 1
		{
		if(player&&hdweapon(player.readyweapon)){
		 player.cmd.buttons|=BT_ZOOM;
		 DropInventory(player.readyweapon);
		}
		}
		TNT1 A 0;
		goto nope;
	spawn:
		KNFP X 0 A_JumpIf(invoker.bNOEXTREMEDEATH==true,"spawn2");
		KNFP Y 1;
		loop;
	spawn2:
		KNFP X 1 A_SetPitch(15+pitch);
		loop;
	spawn3:
		KNFP X 1;
		loop;
	
	
	death:
		KNFP X 1 {
		invoker.bjustchucked=false;
		A_SpawnItemEx("BulletPuffSmall");
		A_NoGravity();
			if(tracer){
				//if(tracer.bcorpse)hdf.give(tracer,"SawGib",random(5,10));
				if(tracer.bnoblood)
				{
				HDBleedingWound.inflict(tracer,15);
				}
				else 
				{
				HDBleedingWound.inflict(tracer,15);
				}
			}
		}
		goto spawn3;
	Xdeath:
		KNFP X 1 {
		invoker.bjustchucked=false;
			if(tracer){
				//if(tracer.bcorpse)hdf.give(tracer,"SawGib",random(5,10));
				if(tracer.bnoblood)
				{
				HDBleedingWound.inflict(tracer,15);
				}
				else 
				{
				HDBleedingWound.inflict(tracer,15);
				}
			}
		}
		goto spawn3;
	Crash:
		KNFP X 1 {
		invoker.bjustchucked=false;
			if(tracer){
				//if(tracer.bcorpse)hdf.give(tracer,"SawGib",random(5,10));
				if(tracer.bnoblood)
				{
				HDBleedingWound.inflict(tracer,15);
				}
				else 
				{
				HDBleedingWound.inflict(tracer,15);
				}
			}
		}
		goto spawn3;
	unload:
		#### E 0;
		goto nope;
	ohnomyknife:
		tnt1 a 0;
		stop;
	}
}
